---
- name: Set version string
  when: docker_version | length > 0
  ansible.builtin.set_fact:
    _docker_version_string: "{{ docker_os_pkg_version_separator[_docker_os_dist_file_varity] }}{{ docker_version }}"

- name: Set packages state to latest
  when: docker_latest_version | bool and docker_version | length == 0
  ansible.builtin.set_fact:
    _docker_pkg_state: "latest"

- name: Handle Amazon Linux 2/2023 Docker package
  when:
    - _docker_packages is not defined
    - _docker_os_dist == "Amazon"
  ansible.builtin.set_fact:
    _docker_packages:
      - docker

- name: Do workaround to handle CentOS/RHEL 8 installation issues
  when:
    - _docker_packages is not defined
    - docker_x_redhat_centos_8_workaround | bool
    - _docker_os_dist == "CentOS" or _docker_os_dist == "RedHat"
    - _docker_os_dist_major_version | int > 7
  ansible.builtin.set_fact:
    _docker_packages:
      - "{{ docker_x_redhat_centos_8_containerd_rpm }}"
      - docker-ce-cli
      - docker-ce

- name: Ensure Docker CE is installed
  become: true
  ansible.builtin.package:
    name: "{{ (item is search('docker-ce')) | ternary((item + _docker_version_string | default('')), item) }}"
    state: "{{ _docker_pkg_state | default('present') }}"
    allow_unauthenticated: "{{ docker_allow_unauthenticated if ansible_pkg_mgr == 'apt' else omit }}"
    disable_gpg_check: "{{ docker_disable_gpg_check if ansible_pkg_mgr in ['rpm', 'yum', 'dnf', 'dnf5', 'zypper'] else omit }}"

  loop: "{{ _docker_packages | default(docker_packages) }}"
  register: _docker_pkg_result
  retries: 6
  until: _docker_pkg_result is succeeded

- name: Docker daemon restart is required
  when: _docker_pkg_result is changed
  ansible.builtin.set_fact:
    _docker_restart_required: true
  tags:
    - skip_ansible_lint
