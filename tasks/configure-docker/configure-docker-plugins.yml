- name: Ensure Docker daemon is started/restarted # noqa: args[module]
  become: true
  ansible.builtin.service:
    name: docker
    state: "{{ _docker_restart_required | ternary('restarted', 'started') }}"

- name: Wait for Docker daemon to started
  become: true
  ansible.builtin.shell: docker info
  register: _docker_info
  until: _docker_info.rc == 0
  retries: 10
  changed_when: false
  tags:
    - skip_ansible_lint

- name: Install Docker plugins
  become: true
  ansible.builtin.shell: "(docker plugin install --grant-all-permissions --alias {{ item.alias | default(item.name) }} {{ item.name }} {{ item.args | default('') }} \
    && echo 'installed') || echo 'nop'"
  loop: "{{ docker_plugins }}"
  register: _docker_plugin_install
  changed_when: _docker_plugin_install.stdout_lines | last == 'installed'
  when:
    - docker_network_access | bool

- name: Reset list of authorization plugins
  ansible.builtin.set_fact:
    _authz_plugins: []

- name: Create list of authorization plugins
  ansible.builtin.set_fact:
    _authz_plugins: "{{ _authz_plugins + [item.alias | default(item.name)] }}"
  loop: "{{ docker_plugins }}"
  when:
    - item.type == 'authz'

- name: Update Docker daemon configuration with authorization plugins
  ansible.builtin.set_fact:
    _docker_daemon_config: "{{ docker_daemon_config | combine(_updated_item, recursive=true) }}"
  vars:
    _updated_item: "{ 'authorization-plugins': {{ _authz_plugins | list }} }"

- name: Update Docker daemon (variables)
  when:
    - docker_daemon_config_file is not defined
    - docker_daemon_config is defined
  become: true
  ansible.builtin.copy:
    content: "{{ _docker_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  register: _docker_config_var_plugin

- name: Docker daemon restart is required
  when: _docker_config_var_plugin is changed
  ansible.builtin.set_fact:
    _docker_restart_required: true
  tags:
    - skip_ansible_lint
