---
- name: Reset internal variables for additional packages to be installed
  ansible.builtin.set_fact:
    _docker_additional_packages_os: []
    _docker_additional_packages_pip: []

- name: Set facts to install Docker SDK for Python
  when:
    - docker_sdk | bool
  ansible.builtin.set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + \
      (docker_predefined_packages_pip[_docker_os_dist_file_varity]['sdk'] | default([])) }}"
    _docker_additional_packages_os: "{{ _docker_additional_packages_os + \
      (docker_predefined_packages_os[_docker_os_dist_file_varity]['sdk'] | default([])) }}"

- name: Set facts to install Docker Stack dependencies
  when:
    - docker_stack | bool
  ansible.builtin.set_fact:
    _docker_additional_packages_pip: "{{ _docker_additional_packages_pip + \
      (docker_predefined_packages_pip[_docker_os_dist_file_varity]['stack'] | default([])) }}"
    _docker_additional_packages_os: "{{ _docker_additional_packages_os + \
      (docker_predefined_packages_os[_docker_os_dist_file_varity]['stack'] | default([])) }}"

- name: Set facts with additional package to be installed
  ansible.builtin.set_fact:
    _docker_additional_packages_pip: "{{ docker_additional_packages_pip + _docker_additional_packages_pip }}"
    _docker_additional_packages_os: "{{ docker_additional_packages_os + _docker_additional_packages_os }}"

- name: Ensure required OS packages will be installed for PiP
  when:
    - _docker_additional_packages_pip | length > 0
  block:
    - name: Set fact for path test of pip/pip3
      ansible.builtin.set_fact:
        _docker_pip_or_pip3: "{{ _docker_python3 | ternary('pip3', 'pip') }}"

    - name: Determine if pip/pip3 exists in path
      become: true
      ansible.builtin.shell: type {{ _docker_pip_or_pip3 }}
      register: _docker_pip_cmd
      changed_when: false
      failed_when: false
      check_mode: no
      tags:
        - skip_ansible_lint

    - name: Set fact to install Python 2 PiP and build dependencies
      when:
        - not _docker_python3 | bool
      ansible.builtin.set_fact:
        _docker_additional_packages_os: >
          {{ _docker_additional_packages_os
            + ([] if (_docker_pip_cmd.rc == 0) else [docker_pip_package])
            + [docker_python2_build_os_pkgs[_docker_os_dist] | default(docker_python2_build_os_pkgs[_docker_os_dist_file_varity])] }}

    - name: Set fact to install Python 3 PiP and build dependencies
      when:
        - _docker_python3 | bool
      ansible.builtin.set_fact:
        _docker_additional_packages_os: >
          {{ _docker_additional_packages_os
            + ([] if (_docker_pip_cmd.rc == 0) else [docker_pip3_package])
            + [docker_python3_build_os_pkgs[_docker_os_dist] | default(docker_python3_build_os_pkgs[_docker_os_dist_file_varity])] }}

    - name: Ensure python-pip-whl is present (Debian 8)
      when:
        - _docker_os_dist == "Debian"
        - _docker_os_dist_major_version | int == 8
      ansible.builtin.set_fact:
        _docker_additional_packages_os: "{{ _docker_additional_packages_os + ['python-pip-whl'] }}"

    - name: Ensure python-backports.ssl-match-hostname is present (Debian 10)
      when:
        - not _docker_python3 | bool
        - _docker_os_dist == "Debian"
        - _docker_os_dist_major_version | int == 10
      ansible.builtin.set_fact:
        _docker_additional_packages_os: "{{ _docker_additional_packages_os + ['python-backports.ssl-match-hostname'] }}"

- name: Ensure EPEL release repository is installed
  when:
    - docker_setup_repos | bool
    - _docker_os_dist == "CentOS"
    - _docker_additional_packages_os | length > 0
  become: true
  ansible.builtin.package:
    name: "epel-release"
    state: present
    allow_unauthenticated: "{{ docker_allow_unauthenticated if ansible_pkg_mgr == 'apt' else omit }}"
    disable_gpg_check: "{{ docker_disable_gpg_check if ansible_pkg_mgr in ['yum', 'dnf', 'zypper'] else omit }}"
  register: _pkg_result
  until: _pkg_result is succeeded

- name: Install additional packages (OS package manager)
  when: _docker_additional_packages_os | length > 0
  become: true
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
    allow_unauthenticated: "{{ docker_allow_unauthenticated if ansible_pkg_mgr == 'apt' else omit }}"
    disable_gpg_check: "{{ docker_disable_gpg_check if ansible_pkg_mgr in ['yum', 'dnf', 'zypper'] else omit }}"
  loop: "{{ _docker_additional_packages_os }}"
  register: _pkg_result
  until: _pkg_result is succeeded

- name: Fetch install PiP version
  when:
    - _docker_additional_packages_pip | length > 0
  become: "{{ docker_pip_sudo | bool }}"
  ansible.builtin.command: "{{ _docker_pip_or_pip3 }} --version"
  changed_when: no
  check_mode: no
  register: _pip_version

- name: Check and set PiP for upgrade if necessary
  when:
    - _pip_version is defined
    - _pip_version.stdout_lines[0] is defined
  block:
    # Best effort workaround to avoid 'No module named zipp'
    # https://github.com/haxorof/ansible-role-docker-ce/issues/112

    - name: Set PiP to be upgraded due to too old PiP version (< 9.0.0)
      when:
        - docker_x_fix_no_zipp_module
        - not docker_x_skip_pip_auto_upgrade | bool
        - (_pip_version.stdout_lines[0] | regex_replace('^pip\s(\d+\.\d+).+$', '\\1')) is version('9.0', '<')
      ansible.builtin.set_fact:
        docker_pip_upgrade: true

    - name: Set PiP to be upgraded due to Rust depencency for cryptography
      when:
        - _docker_python3 | bool
        - not docker_x_skip_pip_auto_upgrade | bool
        - (_pip_version.stdout_lines[0] | regex_replace('^pip\s(\d+\.\d+).+$', '\\1')) is version('21.0', '<')
      ansible.builtin.set_fact:
        docker_pip_upgrade: true

# PiP 21 drop Python 2 support
# https://pip.pypa.io/en/latest/development/release-process/#python-2-support
# https://github.com/pypa/pip/issues/7423
- name: Ensure PiP upgrade for Python 2 only is upgraded to at most 20.3
  when:
    - (not _docker_python3 | bool) or (_docker_os_dist == "Ubuntu" and _docker_os_dist_major_version | int < 18)
    - not docker_x_skip_pip_auto_upgrade | bool
    - docker_pip_upgrade | bool
  ansible.builtin.set_fact:
    docker_pip_package_pip: "{{ docker_pip_package_pip }}<21"

- name: Upgrade/Reinstall PiP
  when:
    - _docker_additional_packages_pip | length > 0
    - docker_pip_upgrade | bool
  become: "{{ docker_pip_sudo | bool }}"
  ansible.builtin.pip:
    name: "{{ docker_pip_package_pip }}"
    state: forcereinstall
  register: _pkg_result
  until: _pkg_result is succeeded

- name: Install additional packages (PiP)
  when: _docker_additional_packages_pip | length > 0
  become: "{{ docker_pip_sudo | bool }}"
  ansible.builtin.pip:
    name: "{{ item }}"
    state: present
    extra_args: "{{ docker_pip_extra_args }}"
  loop: "{{ _docker_additional_packages_pip }}"
  register: _pkg_result
  until: _pkg_result is succeeded
  environment:
    PYTHONWARNINGS: ignore

# https://github.com/docker/docker-py/issues/1502
- name: Workaround for issue - No module named ssl_match_hostname (Python 2.7)
  when:
    - docker_x_ssl_match_hostname | bool
    - not _docker_python3 | bool
    - _docker_additional_packages_pip | length > 0
  block:
    - name: Test if module ssl_match_hostname exists
      ansible.builtin.command: python -c "import backports.ssl_match_hostname"
      register: _docker_check_smh
      changed_when: _docker_check_smh.rc == 1
      failed_when: _docker_check_smh.rc > 1
      tags:
        - skip_ansible_lint

    - name: Apply workaround for issue - No module named ssl_match_hostname (Python 2.7)
      when: _docker_check_smh is changed
      become: yes
      ansible.builtin.command: cp -r /usr/local/lib/python2.7/dist-packages/backports/ssl_match_hostname/ /usr/lib/python2.7/dist-packages/backports
      check_mode: no
      tags:
        - skip_ansible_lint

- name: Workaround for issue - No module named shutil_get_terminal_size (Python 2.7)
  when:
    - docker_x_shutil_get_terminal_size | bool
    - not _docker_python3 | bool
    - _docker_additional_packages_pip | length > 0
  block:
    - name: Test if module shutil_get_terminal_size exists
      ansible.builtin.command: python -c "import backports.shutil_get_terminal_size"
      register: _docker_check_shutil
      changed_when: _docker_check_shutil.rc == 1
      failed_when: _docker_check_shutil.rc > 1
      tags:
        - skip_ansible_lint

    - name: Apply workaround for issue - No module named shutil_get_terminal_size (Python 2.7)
      when: _docker_check_shutil is changed
      become: yes
      ansible.builtin.command: cp -r /usr/local/lib/python2.7/dist-packages/backports/shutil_get_terminal_size/ /usr/lib/python2.7/dist-packages/backports
      check_mode: no
      tags:
        - skip_ansible_lint

- name: Gather the package facts
  ansible.builtin.package_facts:
    manager: auto

- name: Install docker compose downloaded from Github when Docker CLI plugin package is not available
  when:
    - docker_compose | bool
    - not 'docker-compose-plugin' in ansible_facts.packages
  block:
    # # Require Python library 'github3'
    # - name: Get latest release of docker compose
    #   community.general.github_release:
    #     user: docker
    #     repo: compose
    #     action: latest_release
    #   register: _github_docker_compose

    # - name: Set detected docker compose version
    #   ansible.builtin.set_fact:
    #     _docker_compose_version: "{{ _github_docker_compose.tag }}"
    #   when:
    #     - _github_docker_compose is defined
    #     - _github_docker_compose.tag is defined

    - name: Get latest release information of docker-compose via GitHub API
      ansible.builtin.uri:
        url: https://api.github.com/repos/docker/compose/releases/latest
        body_format: json
      register: _github_docker_compose
      until: _github_docker_compose.status == 200 or _github_docker_compose.status == 403
      retries: 10
      check_mode: no

    - name: Set detected docker compose version
      ansible.builtin.set_fact:
        _docker_compose_version: "{{ _github_docker_compose.json.tag_name | replace('v', '') }}"
      when:
        - _github_docker_compose is defined
        - _github_docker_compose.status is defined
        - _github_docker_compose.status == 200
        - _github_docker_compose.json is defined

    - name: Install docker compose {{ _docker_compose_version }} (Linux)
      when: _docker_compose_version is defined
      become: true
      ansible.builtin.get_url:
        url: "https://github.com/docker/compose/releases/download/\
          v{{ _docker_compose_version }}/docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}"
        checksum: "sha256:https://github.com/docker/compose/releases/download/\
          v{{ _docker_compose_version }}/\
          docker-compose-{{ ansible_system | lower }}-{{ ansible_architecture }}.sha256"
        dest: "{{ docker_cli_plugins_dir[_docker_os_dist_file_varity] }}/docker-compose"
        mode: 0755
      retries: 10

# Official installation of docker-compose (Linux): https://docs.docker.com/compose/install/#install-compose
- name: Create docker-compose symlinks for backward compatibility of this role
  when:
    - docker_compose | bool
  block:
    - name: Stat docker-compose
      ansible.builtin.stat:
        path: "{{ docker_cli_plugins_dir[_docker_os_dist_file_varity] }}/docker-compose"
      register: _docker_compose_cli_file
      check_mode: no

    - name: Create symlink for docker-compose
      when: _docker_compose_cli_file.stat.exists
      become: true
      ansible.builtin.file:
        src: "{{ _docker_compose_cli_file.stat.path }}"
        dest: /usr/local/bin/docker-compose
        state: link
        force: yes

    - name: Create symlink for docker-compose to work with sudo in some distributions
      when: _docker_compose_cli_file.stat.exists
      become: true
      ansible.builtin.file:
        src: "{{ _docker_compose_cli_file.stat.path }}"
        dest: /usr/bin/docker-compose
        state: link
        force: yes
