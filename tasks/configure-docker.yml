---
# https://wiki.ubuntu.com/SystemdForUpstartUsers
# Important! systemd is only fully supported in Ubuntu 15.04 and later releases
- name: Determine usage of systemd
  become: true
  ansible.builtin.shell: "ps -p1 | grep systemd 1>/dev/null && echo systemd || echo upstart"
  changed_when: false
  check_mode: false
  register: _determine_systemd_usage
  tags:
    - skip_ansible_lint

- name: Set fact to indicate systemd is used or not
  ansible.builtin.set_fact:
    _docker_systemd_used: "{{ _determine_systemd_usage is defined and _determine_systemd_usage.stdout == 'systemd' }}"

- name: Configure systemd service
  when: _docker_systemd_used | bool
  ansible.builtin.include_tasks: configure-docker/configure-systemd.yml

- name: Configure non-systemd service
  when: not _docker_systemd_used | bool
  ansible.builtin.include_tasks: configure-docker/configure-non-systemd.yml

- name: Ensure /etc/docker directory exists
  become: true
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    mode: 0755

- name: Configure Docker daemon (file)
  when: docker_daemon_config_file is defined
  become: true
  ansible.builtin.copy:
    src: "{{ docker_daemon_config_file }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  register: _docker_config_file

- name: Configure Docker daemon (variables)
  when:
    - docker_daemon_config_file is not defined
    - docker_daemon_config is defined
  become: true
  ansible.builtin.copy:
    content: "{{ docker_daemon_config | to_nice_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  register: _docker_config_var

- name: Ensure Docker default user namespace is defined in subuid and subgid
  when: (_docker_os_dist == "CentOS" or _docker_os_dist == "RedHat") and
        ((docker_daemon_config is defined and
        docker_daemon_config['userns-remap'] is defined and
        docker_daemon_config['userns-remap'] == 'default') or
        docker_bug_usermod | bool)
  become: true
  ansible.builtin.lineinfile:
    path: "{{ item }}"
    regexp: '^dockremap'
    line: 'dockremap:500000:65536'
  loop:
    - /etc/subuid
    - /etc/subgid

- name: Ensure Docker users are added to the docker group
  become: true
  ansible.builtin.user:
    name: "{{ item }}"
    groups: docker
    append: true
  loop: "{{ docker_users }}"

- name: Enable Docker service
  become: true
  ansible.builtin.service:
    use: "{{ docker_x_service_mgr }}"
    name: docker
    enabled: true
  register: _docker_service

- name: Docker daemon restart is required
  when: (
         _docker_service.status is defined
         and _docker_service.status.SubState is defined
         and _docker_service.status.SubState != "running"
        ) or (
          _docker_config_file is changed
          or _docker_config_var is changed
        )
  ansible.builtin.set_fact:
    _docker_restart_required: true

- name: Install and configure Docker plugins
  when: docker_plugins | length > 0
  ansible.builtin.include_tasks: configure-docker/configure-docker-plugins.yml

- name: Trigger restart of Docker daemon
  when: _docker_restart_required | bool
  become: true
  ansible.builtin.service:
    use: "{{ docker_x_service_mgr }}"
    name: docker
    state: restarted

- name: Ensure Docker daemon is running
  become: true
  ansible.builtin.service:
    use: "{{ docker_x_service_mgr }}"
    name: docker
    state: started
